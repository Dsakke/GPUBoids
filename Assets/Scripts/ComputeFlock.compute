// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma enable_d3d11_debug_symbols

#include "Steering.cginc"


static const int threadGroupsSize = 1024;




RWStructuredBuffer<Boid> g_Boids;
float g_WorldSize;
float g_NeighborhoodRad;
int g_NrBoids;
float g_Acceleration;
float g_MaxSpeed;
float g_Seperation;
float g_Cohesion;
float g_Allignment;
float g_Wander;
float g_WanderCubeSize;
float g_WanderCubeDistance;



[numthreads(threadGroupsSize, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{	
	//register neighbors
    int nrNeighbors = 0;
    float3 averageAllignment = (float3)0;
    float3 averageCohesion = (float3) 0;
    float3 averageSeperation = (float3) 0;
    for (int idx = 0; idx < g_NrBoids; ++idx)
    {
        float3 otherPos = g_Boids[idx].position;
        float3 vecFromNeighbor = g_Boids[id.x].position - g_Boids[idx].position;
        float dist = length(vecFromNeighbor);
        if (dist < g_NeighborhoodRad) 
        {
            ++nrNeighbors;
            averageAllignment += Allign(g_Boids[idx]);
            averageCohesion += g_Boids[idx].position;
            if(dist != 0.0f)
                averageSeperation += Seperate(g_Boids[id.x], g_Boids[idx], g_NeighborhoodRad);
        }
    }

    // Wander Behaviour
    float3 wander = Wander(g_Boids[id.x], g_WanderCubeSize, g_WanderCubeDistance, id) * g_Wander;
    
    averageAllignment /= nrNeighbors;
    averageCohesion /= nrNeighbors;
    float3 cohesion = averageCohesion - g_Boids[id.x].position;
    averageSeperation /= nrNeighbors;
    
    float allingmentLength = length(averageAllignment);
    if (allingmentLength != 0)
        averageAllignment = (averageAllignment / allingmentLength) * g_Allignment;
    
    cohesion = normalize(cohesion) * g_Cohesion;
    float seperationLength = length(averageSeperation);
    if (seperationLength > 0)
    {
        averageSeperation = (averageSeperation / seperationLength) * g_Seperation;      
    }
    
    float3 steering = averageAllignment + cohesion + averageSeperation + wander;
    float steeringLength = length(steering);
    if(steeringLength > 0)
    {
        g_Boids[id.x].velocity += steering / steeringLength * g_Acceleration;
    }
    
    float speed = length(g_Boids[id.x].velocity);
    if(speed > g_MaxSpeed)
    {
        g_Boids[id.x].velocity = (g_Boids[id.x].velocity / speed) * g_MaxSpeed;
    }
    g_Boids[id.x].position += g_Boids[id.x].velocity;
    
	// Keep boids in world, if the move out they get teleported to the other side
    if (g_Boids[id.x].position.x > g_WorldSize)
    {
        g_Boids[id.x].position.x = -g_WorldSize;
    }
    else if (g_Boids[id.x].position.x < -g_WorldSize)
    {
        g_Boids[id.x].position.x = g_WorldSize;
    }
	
    if (g_Boids[id.x].position.y > g_WorldSize)
    {
        g_Boids[id.x].position.y = -g_WorldSize;
    }
    else if (g_Boids[id.x].position.y < -g_WorldSize)
    {
        g_Boids[id.x].position.y = g_WorldSize;
    }
    
    if (g_Boids[id.x].position.z > g_WorldSize)
    {
        g_Boids[id.x].position.z = -g_WorldSize;
    }
    else if (g_Boids[id.x].position.z < -g_WorldSize)
    {
        g_Boids[id.x].position.z = g_WorldSize;
    }
}

